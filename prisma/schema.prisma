// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  fullname  String   @db.VarChar(255)
  bio       String   @db.Text
  username  String   @unique @db.VarChar(50)
  email     String   @unique @db.VarChar(100)
  password  String   @db.VarChar(255)
  role      RoleUser @default(Member)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project     Project[]
  createdTask Task[]    
  comments    Comment[]

  ProjectMember ProjectMember[]
}

model Project {
  id          String          @id @default(uuid())
  name        String          @db.VarChar(255)
  description String?         @db.Text
  date_start  DateTime
  date_end    DateTime
  status      ProjectStatus   @default(NOT_STARTED)
  priority    ProjectPriority @default(MEDIUM)
  created_by  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  Task Task[]
  user User   @relation(fields: [created_by], references: [id])

  ProjectMember ProjectMember[]
  Comment       Comment[]
}

model Task {
  id          String       @id @default(uuid())
  projectId   String
  name        String       @db.VarChar(255)
  description String?      @db.Text
  date_start  DateTime
  date_end    DateTime
  status      TaskStatus   @default(NOT_STARTED)
  priority    TaskPriority @default(MEDIUM)
  created_by  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User      @relation(fields: [created_by], references: [id])
  project Project   @relation(fields: [projectId], references: [id])
  Comment Comment[]
}

model ProjectMember {
  id        String              @id @default(uuid())
  projectId String
  userId    String
  role      UserProjectPosition @default(Member)
  joinedAt  DateTime

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([projectId, userId], name: "unique_project_user")
}

model Comment {
  id        String   @id @default(uuid())
  projectId String
  taskId    String?
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  task    Task?    @relation(fields: [taskId], references: [id])
}

enum RoleUser {
  Admin
  Manager
  Member
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum ProjectPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum UserProjectPosition {
  Leader
  Member
}
